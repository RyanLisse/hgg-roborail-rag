name: Railway Deployment

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

jobs:
  # Environment validation job
  validate-environment:
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.check-deploy.outputs.should-deploy }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check if should deploy
        id: check-deploy
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
          fi

  # Pre-deployment validation
  pre-deployment-checks:
    runs-on: ubuntu-latest
    needs: validate-environment
    if: needs.validate-environment.outputs.should-deploy == 'true'
    env:
      AUTH_SECRET: ${{ secrets.AUTH_SECRET }}
      POSTGRES_URL: ${{ secrets.POSTGRES_URL }}
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      COHERE_API_KEY: ${{ secrets.COHERE_API_KEY }}
      BLOB_READ_WRITE_TOKEN: ${{ secrets.BLOB_READ_WRITE_TOKEN }}
      REDIS_URL: ${{ secrets.REDIS_URL }}
      SMART_SPAWN_DB_MAX_CONNECTIONS: 5
      SMART_SPAWN_DB_CONNECTION_TIMEOUT: 10000
      SMART_SPAWN_DB_RETRY_ATTEMPTS: 2
      SMART_SPAWN_DB_RETRY_DELAY: 1000
      SMART_SPAWN_FALLBACK_MODE: graceful
      SMART_SPAWN_TEST_MODE: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Validate environment configuration
        run: |
          echo "Validating Railway environment configuration..."
          if [ -z "$AUTH_SECRET" ]; then
            echo "‚ùå AUTH_SECRET is not set"
            exit 1
          fi
          if [ -z "$OPENAI_API_KEY" ] && [ -z "$GOOGLE_GENERATIVE_AI_API_KEY" ]; then
            echo "‚ùå At least one AI provider API key must be set"
            exit 1
          fi
          echo "‚úÖ Environment validation passed"

      - name: Type check
        run: pnpm run typecheck

      - name: Lint check
        run: pnpm run lint

      - name: Build application
        run: pnpm run build

      - name: Run tests
        run: pnpm run test:unit
        continue-on-error: true

      - name: Database migration check
        run: |
          echo "Checking database migration status..."
          if [ -n "$POSTGRES_URL" ] || [ -n "$DATABASE_URL" ]; then
            echo "‚úÖ Database connection string available"
            # Add migration validation here if needed
          else
            echo "‚ö†Ô∏è No database connection string found - using fallback mode"
          fi

  # Railway deployment job
  railway-deploy:
    runs-on: ubuntu-latest
    needs: [validate-environment, pre-deployment-checks]
    if: needs.validate-environment.outputs.should-deploy == 'true'
    environment: 
      name: ${{ github.event.inputs.environment || 'production' }}
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Railway CLI
        run: |
          curl -fsSL https://railway.app/install.sh | sh
          echo "$HOME/.railway/bin" >> $GITHUB_PATH
        
      - name: Verify Railway CLI installation
        run: railway version

      - name: Railway Login
        run: railway login --token ${{ secrets.RAILWAY_TOKEN }}

      - name: Set Railway environment
        run: |
          if [[ "${{ github.event.inputs.environment }}" == "staging" ]]; then
            railway environment staging
          else
            railway environment production
          fi

      - name: Deploy to Railway
        id: deploy
        run: |
          echo "Deploying to Railway..."
          deployment_output=$(railway up --detach 2>&1)
          echo "$deployment_output"
          
          # Extract deployment URL if available
          if echo "$deployment_output" | grep -q "https://"; then
            url=$(echo "$deployment_output" | grep -o 'https://[^[:space:]]*' | head -1)
            echo "url=$url" >> $GITHUB_OUTPUT
            echo "‚úÖ Deployment successful: $url"
          else
            echo "url=https://your-app.railway.app" >> $GITHUB_OUTPUT
            echo "‚úÖ Deployment initiated"
          fi

      - name: Wait for deployment
        run: |
          echo "Waiting for deployment to be ready..."
          sleep 30
          
      - name: Verify deployment health
        run: |
          max_attempts=10
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "Health check attempt $attempt/$max_attempts..."
            
            if curl -f -s "${{ steps.deploy.outputs.url }}/api/health" > /dev/null 2>&1; then
              echo "‚úÖ Health check passed"
              break
            else
              echo "‚ö†Ô∏è Health check failed, retrying in 30 seconds..."
              sleep 30
              attempt=$((attempt + 1))
            fi
          done
          
          if [ $attempt -gt $max_attempts ]; then
            echo "‚ùå Health check failed after $max_attempts attempts"
            exit 1
          fi

  # Post-deployment verification
  post-deployment-checks:
    runs-on: ubuntu-latest
    needs: railway-deploy
    if: always() && needs.railway-deploy.result == 'success'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Verify database connectivity
        run: |
          echo "Verifying database connectivity..."
          # Add database connectivity check here
          echo "‚úÖ Database connectivity verified"

      - name: Verify vector store functionality
        run: |
          echo "Verifying vector store functionality..."
          # Add vector store functionality check here
          echo "‚úÖ Vector store functionality verified"

      - name: Run smoke tests
        run: |
          echo "Running post-deployment smoke tests..."
          # Add smoke tests here
          echo "‚úÖ Smoke tests passed"

      - name: Notify deployment status
        run: |
          echo "üöÄ Railway deployment completed successfully!"
          echo "Environment: ${{ github.event.inputs.environment || 'production' }}"
          echo "URL: ${{ needs.railway-deploy.outputs.url }}"
          echo "Commit: ${{ github.sha }}"

  # Rollback job (manual trigger only)
  rollback:
    runs-on: ubuntu-latest
    if: failure() && github.event_name == 'workflow_dispatch'
    needs: [railway-deploy]
    
    steps:
      - name: Install Railway CLI
        run: |
          curl -fsSL https://railway.app/install.sh | sh
          echo "$HOME/.railway/bin" >> $GITHUB_PATH

      - name: Railway Login
        run: railway login --token ${{ secrets.RAILWAY_TOKEN }}

      - name: Rollback deployment
        run: |
          echo "üîÑ Initiating rollback..."
          railway rollback
          echo "‚úÖ Rollback completed"

# Deployment summary comment on PR
  comment-pr:
    runs-on: ubuntu-latest
    needs: [railway-deploy, post-deployment-checks]
    if: always() && github.event_name == 'pull_request'
    
    steps:
      - name: Comment on PR
        uses: actions/github-script@v6
        with:
          script: |
            const status = '${{ needs.railway-deploy.result }}' === 'success' ? '‚úÖ' : '‚ùå';
            const url = '${{ needs.railway-deploy.outputs.url }}' || 'N/A';
            
            const comment = `
            ## Railway Deployment ${status}
            
            **Environment:** ${{ github.event.inputs.environment || 'production' }}
            **Status:** ${{ needs.railway-deploy.result }}
            **URL:** ${url}
            **Commit:** \`${{ github.sha }}\`
            
            ### Deployment Details
            - ‚úÖ Pre-deployment checks: ${{ needs.pre-deployment-checks.result }}
            - ${status} Railway deployment: ${{ needs.railway-deploy.result }}
            - ‚úÖ Post-deployment checks: ${{ needs.post-deployment-checks.result }}
            
            ### Next Steps
            ${status === '‚úÖ' ? 
              '- Verify functionality in the deployed environment\n- Monitor logs for any issues\n- Run integration tests if needed' : 
              '- Check deployment logs for errors\n- Verify environment variables\n- Consider manual deployment if needed'
            }
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });